#!/bin/bash

# Make a directory for storing logs
mkdir ./handlingRepeats
#mkdir -p ./runLogs

# Get the docker image and convert to Singularity, to run this on the BioHPC:
singularity pull tetools.sif docker://dfam/tetools:latest

# Iterate through the list of samples, identifying repeats in the assemblies (i.e. in the consensus sequence files):
# This requires that the sample name file be given as input on the command line:
while read -r line;
do
  export consensus=./consensusSequences/$line"Consensus.fa"
  export final="./handlingRepeats/"$line"-rmod.log"
  echo $line
  if [ -s "$final" ]; then
    echo "$final exists."
    mv $line* ./handlingRepeats/
    mv RM* ./handlingRepeats/
  else
    echo "$final does not exist."
    # Build new RepeatModeler BLAST database with a name that includes an ID (e.g., a species code, specimen ID, etc.) and genus/species.
    singularity exec --bind $PWD ./tetools.sif BuildDatabase -name $line -engine ncbi $consensus

    # now run RepeatModeler with 16 cores and send results from STDOUT and STDERR streams to 1_repeatmodeler.log
    # in my experience, this command takes 1-3 days with vertebrate genomes
    singularity exec --bind $PWD ./tetools.sif RepeatModeler -pa $2 -engine ncbi -database $line 2>&1

    mv $line* ./handlingRepeats/
    mv RM* ./handlingRepeats/
  fi
done < $1

# Add a prefix to each repetitive element for the species:
while read -r line;
do
  export prefixedFile=./handlingRepeats/prefix_$line"-families.fa"
  if [ -s "$prefixedFile" ]; then
    echo "$prefixedFile exists."
  else
    echo "$prefixedFile does not exist."
    echo $line
    cat ./handlingRepeats/$line"-families.fa" | /programs/seqkit-0.15.0/seqkit fx2tab | awk -v awkvar="$line" '{ print awkvar"_"$0 }' | /programs/seqkit-0.15.0/seqkit tab2fx > ./handlingRepeats/prefix_$line"-families.fa"
  fi
done < samples.txt

echo "_________________"

# Iterate through samples (prefix_POW0461-families.fa) and mask the repeats.
  # -e sets the search engine, here using rmblastn
  # -pa sets the number of threads, here this is set on the command line
  # -a writes alignments in .align output file
  # -lib specifies the library of repeats, here we are using the results from RepeatModeler
  # -dir sets the output directory
while read -r line;
do
  export consensus=./consensusSequences/$line"Consensus.fa"
  singularity exec --bind $PWD ./tetools.sif RepeatMasker -e ncbi -pa $2 -lib ./handlingRepeats/prefix_$line"-families.fa" -a  -dir ./handlingRepeats/ > $consensus
done < $1
