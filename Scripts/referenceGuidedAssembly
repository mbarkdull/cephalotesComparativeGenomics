#!/bin/bash

# I'll have a list of the sample names, from which input and output file names can be derived. This script will run through each sample and assemble it to the C. varians reference genome.
# $1 should be the list of sample names
# $2 is the number of threads to use for each step
mkdir ./trimmedSequences/
mkdir ./nextGenMapOutputs/
mkdir ./calledVariants/
mkdir ./consensusSequences/
touch assemblyLog.txt
echo Beginning genome assembly at `date` >> assemblyLog.txt


while read -r line;
do
  # Trim the raw sequence reads:
  export forwardRawFile=./usftp21.novogene.com/01.RawData/$line/*_1.fq.gz
  export reverseRawFile=./usftp21.novogene.com/01.RawData/$line/*_2.fq.gz
  echo Running on $line
  export outputForwardPaired=./trimmedSequences/trimmedForwardPaired$line.fq.gz
  export outputForwardUnpaired=./trimmedSequences/trimmedForwardUnpaired$line.fq.gz
  export outputReversePaired=./trimmedSequences/trimmedReversePaired$line.fq.gz
  export outputReverseUnpaired=./trimmedSequences/trimmedReverseUnpaired$line.fq.gz

# Trim only if a trimmed file does not already exist:
  if [ -s "$outputReversePaired" ]; then
      echo "$outputReversePaired exists."
  else
    echo "Still need to trim $outputReversePaired"
    java -jar /programs/trimmomatic/trimmomatic-0.39.jar PE -threads $2 -trimlog $line_"trimmomaticLogFile.txt" $forwardRawFile $reverseRawFile $outputForwardPaired $outputForwardUnpaired $outputReversePaired $outputReverseUnpaired ILLUMINACLIP:novogeneAdaptors.fa:2:30:10:2:True LEADING:3 TRAILING:3 MINLEN:35
    echo Finished trimming $line at `date` >> assemblyLog.txt
  fi
done < $1


# Map the trimmed reads to the reference genome:
inputs=$(cat $1)
echo $inputs
for line in $inputs
do
  export nextGenMapOutputSam=mapped$line.sam
  export nextGenMapOutputBam=mapped$line.bam
  export samFile=./nextGenMapOutputs/$nextGenMapOutputSam
  if [ -s "$samFile" ]; then
      echo "$samFile exists."
  else
    echo "Still need to map $samFile"
    /programs/NextGenMap-0.4.11/bin/ngm-0.4.11/ngm  -t $2 -p -r ./CVAR/CVAR_genome_v1.0.fasta -1 $outputForwardPaired -2 $outputReversePaired -o ./nextGenMapOutputs/$nextGenMapOutputSam
    echo Finished NextGenMap on $line at `date` >> assemblyLog.txt
  fi
done

#while read -r line;
#do
  #echo Starting nextgenmap on $line
  # Map the trimmed reads back to the C. varians genome with NextGenMap
  #mkdir ./nextGenMapOutputs/
  #export nextGenMapOutputSam=mapped$line.sam
  #export nextGenMapOutputBam=mapped$line.bam
  #### RIGHT NOW THIS CAUSES THE SCRIPT TO QUIT OUT OF THE WHILE LOOP
  #/programs/NextGenMap-0.4.11/bin/ngm-0.4.11/ngm  -t $2 -p -r ./CVAR/CVAR_genome_v1.0.fasta -1 $outputForwardPaired -2 $outputReversePaired -o ./nextGenMapOutputs/$nextGenMapOutputSam
  #sleep 30
  #echo NEXTGENMAP IS DONE on $line
  #continue
  #echo "I didn't go to the next iteration."
#done < $1

while read -r line;
do
  # Convert .sam files to .bam files
  export bamFile="./nextGenMapOutputs/"$nextGenMapOutputBam
  if [ -s "$bamFile" ]; then
    echo "$bamFile exists."
  else
    echo "$bamFile does not exist."
    /programs/samtools-1.9-r9/bin/samtools  view -bS -@ 10 ./nextGenMapOutputs/$nextGenMapOutputSam > ./nextGenMapOutputs/$nextGenMapOutputBam

    echo Finished converting $line from .sam to .bam at `date` >> assemblyLog.txt
  fi

  # Get summary statistics:
  export summaryStats=./nextGenMapOutputs/$line"summaryStats.txt"

  if [ -s "$summaryStats" ]; then
    echo "$summaryStats exists."
  else
    echo "$summaryStats does not exist."
    samtools flagstat ./nextGenMapOutputs/$nextGenMapOutputBam > $summaryStats
    echo Finished producing summary stats for $line at `date` >> assemblyLog.txt
  fi

  # Sort and index the reads:
  export sortedBam=sorted$nextGenMapOutputBam
  export sortedFile="./nextGenMapOutputs/"$sortedBam

  if [ -s "$sortedFile" ]; then
    echo "$sortedFile exists."
  else
    echo "$sortedFile does not exist."
    /programs/samtools-1.9-r9/bin/samtools sort ./nextGenMapOutputs/$nextGenMapOutputBam -o ./nextGenMapOutputs/$sortedBam
    /programs/samtools-1.9-r9/bin/samtools index ./nextGenMapOutputs/$sortedBam
    echo Finished sorting and indexing $line at `date` >> assemblyLog.txt
  fi

  # Call variants with bcftools:
  export calledVariants=$line"CalledVariants.vcf.gz"
  export variantFile="./calledVariants/"$calledVariants

  if [ -s "$variantFile" ]; then
    echo "$variantFile exists."
  else
    echo "$variantFile does not exist."
    /programs/bcftools-1.9-r9/bin/bcftools mpileup -Ou -f ./CVAR/CVAR_genome_v1.0.fasta ./nextGenMapOutputs/$sortedBam | bcftools call -mv -Ob -o ./calledVariants/$calledVariants
    bcftools index ./calledVariants/$calledVariants
    echo Finished calling variants in $line at `date` >> assemblyLog.txt
  fi

  # Create a consensus sequence:
  export consensus=./consensusSequences/$line"Consensus.fa"

  if [ -s "$consensus" ]; then
    echo "$consensus exists."
  else
    echo "$consensus does not exist."
    cat ./CVAR/CVAR_genome_v1.0.fasta | bcftools consensus ./calledVariants/$calledVariants > $consensus
    echo Finished creating consensus sequence for $line at `date` >> assemblyLog.txt
  fi

  echo __________________ Done with $line _________________
  echo Finished genome assembly at `date` >> assemblyLog.txt

done < $1
